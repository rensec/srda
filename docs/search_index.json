[["index.html", "Social Research in the Digital Age (Utrecht University) About Usage", " Social Research in the Digital Age (Utrecht University) Rense Corten About This page contains tutorials for the Utrecht University course “Social Research in the Digital Age”. Usage To use these tutorials, we suggest that you: Open a new R script; Copy-paste the code from the tutorials into your R script as you read along; Run the code from your script while reading along, to verify that your results are the same; Afterwards, save your R script under an informative name so that you can refer to it and reuse it later. A big part of effective data analysis is realizing that you’ve solved particular problems before and being able to find and recycle your earlier code! "],["a-very-short-introduction-to-r.html", "1 A Very Short Introduction to R", " 1 A Very Short Introduction to R Here comes the introduction to R.- "],["introduction-to-web-scraping-in-r.html", "2 Introduction to web scraping in R 2.1 Some preliminaries: about websites, scraping, and crawling 2.2 Getting our tools ready 2.3 Getting to know the target website 2.4 Making a plan 2.5 Locating the correct information 2.6 Building the scraper 2.7 Answering the research question", " 2 Introduction to web scraping in R This is a tutorial to illustrate the use or R for scraping in a social science context. The application is the Dutch website www.petities.nl, which is a platform where anyone can start a petition for any cause and collect signatures. Such websites fit into a larger trend in which citizens increasingly use the power of the internet to challenge the political status quo. The petitions listed here address a large variety of issues, some more serious than others. Interestingly, some petitions become very successful, while other peter out quickly. What drives such processes? To start addressing this question, we collect some data from this website using a scraper that we build in R. As a motivating research question, let’s state the following simple descriptive question: what does the variation in success between petitions look like? For a first hypothesis on what this might look like, have a look at Fig. 3.4 in the chapter by Margetts et al., as discussed in the seminar. 2.1 Some preliminaries: about websites, scraping, and crawling To get started, we need to understand a bit about the technical nature of web scraping. What is web scraping? For our context, which is social science-oriented research, we typically refer to web scraping as the automated collection of information from websites. In principle, there is nothing fancy about collecting or downloading information from websites. In fact, when you view a website, your browser does exactly this: it downloads some file from a server (such as an html-file) and renders it in a way that looks pretty. If you go to www.petities.nl, you can view this file by right-clicking on the page and selecting “view page source” (in various browsers this may be called slightly differently), which will, in this case, show the the HTML-code which produces the page. The information we want to collect for our research is somehow embedded in this code, and to view it we are already downloading it, so downloading the information per se is not so much the challenge. The real challenges in a web scraping project are a little bit more specific, namely: We want to download a large amount of information in a systematic and automated way; We want to process the information in a way such that we can easily analyze the data later. Step 1 above typically involves that we want to automatically visit a number of web pages, in a systematic way, even if we don’t know all the URL’s of these pages beforehand. For example, on a social media website, we may want to get a list of a given user’s followers, and once we have these followers, their followers, etc. This process of discovering websites by following links is called crawling. Web scraping, in the strict sense of the word, refers to the downloading (and processing) of the information found on those websites. A typical data collection task, then, does both: crawling the web to find relevant websites in a specified way, and in the process storing information from these websites. Generally, when we speak about “web scraping” or “a web scraper”, we actually mean a process or a piece of software that does both crawl and scrape. So let’s build a web scraper for petities.nl. 2.2 Getting our tools ready First, we need to collect some tools, starting with some R packages. Start a new R script, copy and paste the following code, and run it: install.packages( c( &quot;rvest&quot;, # the main package for scraping &quot;stringr&quot;, # some useful functions for working with strings &quot;tidyverse&quot;), # for general data handling repos = &quot;http://cran.us.r-project.org&quot; ) We then activate these packages for this session with library commands: library(rvest) #scraping library(stringr) # string functions library(tidyverse) # for general data handling Second, we need to add some special tool to our browser to get a better understanding of -and grip on- the website that we are scraping. I use Firefox, for which the add-on “ScrapeMate” is available. Chrome has different extensions for the same purpose, and so may other extendable browsers. Note that results may differ between browsers and extensions from website to website, so if you can’t figure out a website (you’ll see what I mean by that later) using one particular browser-extension combination, it’s always worth trying other combinations. Go go ahead and install the relevant extension for your browser. 2.3 Getting to know the target website Before we start coding, it’s always a good idea to get a little bit acquainted with the website we’re scraping. Go to Petities.nl and try to anwer the following questions: Which information is shown about each petition? How are petitions sorted? What different options do we have to show and sort petitions? Which one do you think is most useful for our purpose? What do the numbers in the bottom left and -right of each “petition box” mean? What is your impression about the sort of petitions that are posted here? Does anything stand out? Also, once more look at the page source code (see above). Which part of the content of the page can you already identify in the source code (and which not)? You’ll notice that there is a lot of code that does not seem to refer to any content; things like class=\"search-container whitespace\". This is called CSS (for Cascading Style Sheets) and it determines what a website looks like, by applying certain formatting rules to things that should look familiar (not unlike, for example, the style templates of Microsoft Word or Powerpoint). We’ll take advantage of this later to locate information on the page. 2.4 Making a plan Also, before starting to build our scraper (or before any data collection project, really) it is helpful to already have an idea of what we want our final data set to look like. For now, let’s start simple, and aim for a data set that is basically a list of petitions, and which contains for every petition: The title of the petition The url of the petition page The number of signatures As a data frame, the data should eventually look something like this: What the target data set should look like Title link_url Sig_Count “my petition” “https://petities.nl/petitions/my_petition” 9 … … … … … … … … … Check and see whether you can visually identify this information on the website. 2.5 Locating the correct information As a starting piont, let’s take the section of the website that lists all petitions: https://petities.nl/petitions/all?locale=en. When we look at the source code of the page, we can actually already identify all the information that we need in the code. This, however, is rather messy, and not something we can analyze directly. We somehow need to get the information in the shape of our data table above, and for this we first need to automatically extract the titles, URLs, and counts from the messy source code. This is where our browser extension comes in handy. When we look at the website (not the code), we can actually easily identify the relevant information because it is formatted in a consistent way. To achieve this, the website uses CSS tags in the code, and we can take advantage of that to find the relevant information. We could already do that by looking hard at the code, but our browser extension make it easier. Let’s start with the titles. In Firefox: Go to https://petities.nl/petitions/all?locale=en Click the icon for the “Scrapemate” extension in the toolbar (the little wand) In the resulting sidebar on the right, click the top orange button (“start picker”) Click the title of a petition. A few things will happen: All the titles of the petitions shown on the page will be highlighted. This is an indication that you’ve identified the right “field”; we want all those titles! In the bottom right, you will see a list of all the titles. Again, this is what we want! In the bar below the orange button, you’ll see “.petition-overview-info-title”. This is the relevant CSS tag: basically it tells the browser “show this piece of text as a petition title” (and the actual style of a petition title is stored somewhere in a CSS style file, but we don’t care about that). In building our scraper, we can now make use of that: we can basically tell it to “collect all the pieces of text that are formatted like petition titles”, and we now also know that these pieces of text are marked in the source code as “.petition-overview-info-title” (you can actually see this tag in the source code). So let’s get coding! 2.6 Building the scraper 2.6.1 First steps We now turn to the rvest package. To begin, we simply download the entire page: # Simple version without polite and without pipes webpage &lt;- read_html(&quot;https://petities.nl/petitions/all?locale=en&quot;) webpage ## {html_document} ## &lt;html class=&quot;no-js&quot; lang=&quot;en&quot;&gt; ## [1] &lt;head&gt;\\n&lt;title&gt;All petitions - Petities.nl&lt;/title&gt;\\n&lt;meta content=&quot;text/h ... ## [2] &lt;body class=&quot;vervolg&quot;&gt;\\n&lt;header class=&quot;header&quot;&gt;&lt;div class=&quot;header-content ... This basically just behaves like a browser: it downloads the source code of the page. It still looks like unintelligible code soup. However, we now know what to look for in this soup. Using the html_nodes() function from rvest, we can identify all the titles: title &lt;- html_nodes(webpage, &quot;.petition-overview-info-title&quot;) title ## {xml_nodeset (12)} ## [1] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/help-de-j ... ## [2] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/stop-de-i ... ## [3] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/verbied-m ... ## [4] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/behoud-de ... ## [5] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/voorkom-h ... ## [6] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/barry-fro ... ## [7] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/verwijder ... ## [8] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/stop-de-u ... ## [9] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/breidt-he ... ## [10] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/laat-weth ... ## [11] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/verknal-d ... ## [12] &lt;h2 class=&quot;petition-overview-info-title&quot;&gt;\\n&lt;a href=&quot;/petitions/geef-meer ... This already looks more structured: it is a list of all the parts in the code that where tagged as .petition-overview-info-title. In the next step, we parse (clean up) this list further to keep only the clean text: title &lt;- html_text(title) title ## [1] &quot;Help de jongeren van Soest aan een eigen woning&quot; ## [2] &quot;Stop de identiteitsfraude mogelijkheden bij de IND&quot; ## [3] &quot;Verbied meisjesbesnijdenis in alle landen&quot; ## [4] &quot;Behoud de Parnashofweg als doodlopende straat&quot; ## [5] &quot;Voorkom het einde van markten in het centrum van Amsterdam&quot; ## [6] &quot;Barry (Frontliner) moet weer kaal&quot; ## [7] &quot;Verwijder de hondenwei in het Hof van Onthaasting&quot; ## [8] &quot;Stop de uitbereiding van een mega-munitieopslag in Staphorst&quot; ## [9] &quot;Breidt het oefenterrein de Haar niet uit&quot; ## [10] &quot;Laat wethouder Lot van Hooijdonk aftreden&quot; ## [11] &quot;Verknal de Kollumerwaard niet&quot; ## [12] &quot;Geef meer studietijd tijdens focusweek voor herkansingen op het Ashram College&quot; This basically constitutes our variable “title” for our intended data frame, filled with the values of the petitions on this page. Question: how many titles do we have now? And is this the number you would expect? We can now do the same for our next variable, the url. Using our scrapemate tool again (we can either reset our earlier picker by clicking the circle button next to it, or use one of the other pickers in the sidebar), we can determine that the CSS tag in this case is .petition-overview-image-container. The code to get all the URLs then looks like this: link_url &lt;- webpage %&gt;% html_elements(&quot;.petition-overview-image-container&quot;)%&gt;% html_attr(&quot;href&quot;) Note that now we use the “pipe operator” %&gt;% to simplify the code somewhat (but we could also have done it without as above). Exercise: now write the code to get the number of signatures per petition. 2.6.2 Automating the process: getting multiple pages At this point, we can scrape the required information from the one page, namely, https://petities.nl/petitions/all. However, for our research project, we’re probably interested in more than just these 12 petitions; we want to get a sizable sample of petitions and perhaps even all petitions listed on the website. At the bottom of the page, we see that the list of petitions continues on page 2, 3, etc. Question: how many pages does the list of petitions contain in total? Now of course we could just manually go to the next page, check the url for that page, and repeat our earlier scraping steps to get the petitions for that page. Question: what is the URL of page 2? And page 3? However, this would be very tedious and take a long time. Rather, we’d like to automate this process so that our scraper automatically visits all the pages, and downloads the data. With that, we’re getting to the “crawling” part of web scraping, and it will require a little programming. While this may sound intimidating, it simply means that we are going to “recycle” our earlier instructions to the computer in a smart way. We’ve so far written our code for a specific URL; let’s now write in a way that can be applied to any URL. To do so, we include our earlier code in a function called get_petitions_list(): get_petitions_list &lt;- function(page_url){ webpage &lt;- read_html(page_url) title &lt;- webpage %&gt;% html_nodes(&quot;.petition-overview-info-title&quot;) %&gt;% html_text() link_url &lt;- webpage %&gt;% html_elements(&quot;.petition-overview-image-container&quot;)%&gt;% html_attr(&quot;href&quot;) sig_count &lt;- webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() petitions_list &lt;- data.frame(title, link_url, sig_count) return(petitions_list) } If we run this code, nothing really happens yet: all it does is define the function. That is, we can now refer to this set of scraping instructions using the function get_petitions_list(), filling in the URL of the page that we want to scrape as “page_url”. All the code inside the function will then be applied to this page. Specifically, it does the following: Download the source code of the page Extract the titles of the petitions Extract the link urls for each petition Extract the signature counts for each petition Combine the results in a single data frame The last line in the function starting with return defines the result of the function, in this case, the data frame. Let’s test this function on page 2: p2_petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=2&quot;) Question: did it work correctly? Now that we have a function to get all the data that we want from a given page in one go, all we need to to is apply this to all the pages we want to scrape and combine the results into a single data frame. To do so, we’ll use a loop: petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=1&quot;) # We start with the first page for(i in 2:5){ # Loop throup all values from 2 to 5. The current value is &quot;i&quot; target_page &lt;- paste(&quot;https://petities.nl/petitions/all?locale=en&amp;page=&quot;,i,sep = &quot;&quot;) # Create a string in with we add the current value i to the &quot;stub&quot; of the page url p &lt;-get_petitions_list(target_page) # scrape page i petitions &lt;- rbind(petitions, p) # add the petitions of page i to what we already had } See if you understand the above code with the help of the comments in the code. If you don’t know the additional functions that we use in the loop (for example, paste() or rbind() ), look them up to see what they do. Then, run the code. Question: What do you expect as the result, and is it correct? Question: what would we need to change in the above code to collect data on all petitions on the website? NOTE: at this point, do not actually run the code to collect data for all petitions. While this is tempting, it would 1) take a long time and 2) put an unnecessarily large burden on the Petities.nl servers. In principle, we now have a completely functional scraper! It is capable of automatically visiting a number of pages that we define, and collect the information from those pages that we wanted. Let’s just implement a few small improvements. First, you might have notices that the number of signatures is included in the data frame as a string variable, while it is actually a number. To avoid that we have to fix this afterwords, we can already fix it in our function (see “# NEW”): get_petitions_list &lt;- function(page_url){ webpage &lt;- read_html(page_url) title &lt;- webpage %&gt;% html_nodes(&quot;.petition-overview-info-title&quot;) %&gt;% html_text() link_url &lt;- webpage %&gt;% html_elements(&quot;.petition-overview-image-container&quot;)%&gt;% html_attr(&quot;href&quot;) sig_count &lt;- webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% str_replace_all(&quot;\\\\.&quot;,&quot;&quot;) %&gt;% # NEW: remove Dutch 1000 separator as.numeric() # NEW: change the type from string to numeric petitions_list &lt;- data.frame(title, link_url, sig_count) return(petitions_list) } Second, you may have noticed that scraping five pages (probably) already took a noticeable amount of time. If we’d want to scrape many more pages, we may want to be able to keep track of the progress. For that purpose, we let R print some text to the console to report what going on, in our loop: petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=1&quot;) # We start with the first page for(i in 2:5){ # Loop throup all values from 2 to 5. The current value is &quot;i&quot; print(paste(&quot;scraping page&quot;,i,sep=)) #NEW: print what&#39;s happening to the console target_page &lt;- paste(&quot;https://petities.nl/petitions/all?locale=en&amp;page=&quot;,i,sep = &quot;&quot;) # Create a string in with we add the current value i to the &quot;stub&quot; of the page url p &lt;-get_petitions_list(target_page) # scrape page i petitions &lt;- rbind(petitions, p) # add the petitions of page i to what we already had } ## [1] &quot;scraping page 2&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 3&quot; ## [1] &quot;scraping page 4&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 5&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion You may find that you every now and then get a warning “NAs introduced by coercion” (and if not now, you will certainly later). “NA” is R’s term for missing values. If we look at the data (click “petitions” in the environment tab in the top right), we indeed see that some petitions get the value “NA” (that is, missing) for sig_count. Question: What is the issue with these specific petitions (hint: look them up on the website)? And to what extent is this really a problem? 2.7 Answering the research question 2.7.1 Collecting the data Now that we have our scraper ready, we can start to use it to answer our descriptive research question (see above).First we need to collect a larger amount of data. In a real research project, you would probably want to collect the data of all the petitions on the website. However, since this is an educational project, we don’t want to put too much unnecessary strain on the server, and we have many students accessing the server at the same time, let’s limit our data collection to 25 pages. petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=1&quot;) # We start with the first page for(i in 2:25){ # Loop throup all values from 2 to 5. The current value is &quot;i&quot; print(paste(&quot;scraping page&quot;,i,sep=)) #NEW: print what&#39;s happening to the console target_page &lt;- paste(&quot;https://petities.nl/petitions/all?locale=en&amp;page=&quot;,i,sep = &quot;&quot;) # Create a string in with we add the current value i to the &quot;stub&quot; of the page url p &lt;-get_petitions_list(target_page) # scrape page i petitions &lt;- rbind(petitions, p) # add the petitions of page i to what we already had } ## [1] &quot;scraping page 2&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 3&quot; ## [1] &quot;scraping page 4&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 5&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 6&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 7&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 8&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 9&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 10&quot; ## [1] &quot;scraping page 11&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 12&quot; ## [1] &quot;scraping page 13&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 14&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 15&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 16&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 17&quot; ## [1] &quot;scraping page 18&quot; ## [1] &quot;scraping page 19&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 20&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 21&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 22&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 23&quot; ## [1] &quot;scraping page 24&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion ## [1] &quot;scraping page 25&quot; ## Warning in webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% ## : NAs introduced by coercion Question: Of how many petitions have you now collected data? 2.7.2 Analyzing the data Next, let’s analyze these data a bit. First, let’s get rid of these annoying “NA” values and replace them by 0. The “coalesce()” function helps with that: petitions$sig_count &lt;- coalesce(petitions$sig_count, 0) # replace missings by 0 For a first look at the data, we can draw a simple histogram: hist(petitions$sig_count) Question: What is your first conclusion about the distribution of success? In their analysis of the data, Margetts et al. visualize the data somewhat differently, in a way that helps to assess the skewness of the distribution a bit better. In particular, they plot the number of signatures against the rank of each petition in terms of signatures, and furthermore, they use logarithmic axes. To recreate their plot, we can do the following: # First we create a rank variable (more signatures = higher rank) petitions &lt;- mutate(petitions, rank = dense_rank(desc(sig_count))) # To avoid that petitions with zero signatures are left out of the plot (because the logarithm of zero is not defined) we add 1 to all values: petitions$sig_count &lt;- petitions$sig_count + 1 # Finally, we plot the data: plot(petitions$rank, petitions$sig_count, log = &quot;xy&quot;) Question:: Compare your figure to Figure 3.4 in the Chapter by Margetts et al. Does the distribution of success in the Netherlands look more like the one in the UK or the one in the US? "],["collecting-data-through-apis-the-case-of-reddit.html", "3 Collecting data through APIs: the case of Reddit 3.1 Introduction 3.2 Loading the tools 3.3 Case study: Reddit 3.4 Accessing data via the API 3.5 Getting the data with RedditExtractoR", " 3 Collecting data through APIs: the case of Reddit 3.1 Introduction In this tutorial, we will look at collecting data about human behavior using API access. As an example, we will collect some data from Reddit, the popular online discussion platform. API stands for “application programming interface”, and in general, it is a way in which software applications communicate with each other (instead of with a human user). In the context of websites, web APIs provide means for software applications to access data on web servers. Consider, for example, a smartphone app that allows you to read and post messages on your profile on a social media website such as Facebook. To be able to do so, such an app must be able to communicate with the Facebook server, access information on the server, and send information to the server. For this purpose, Facebook provides an API so that third-party apps can interact with their data. Similarly, a news website that displays the latest “X” (formerly Twitter) trends obtains that information via the X API. In a way, an API is an official “back door” to an application or website designed for other applications or websites; you may compare it with a restaurant that has a front door for guests (in the case of a website: for users) and back door specifically for delivery and employees. In many cases, APIs may also be used for research as they allow researchers to access data stored on web server of interest, such as the web servers of social media services. Web scraping may also be used to access similar data, but there are a number of important differences: As opposed to web scraping, API usage is strictly regulated by the application or website that offers it. That is, the provider of the API determines who can access the API, for what purposes, and under what conditions. Often (but not always), an API requires API users to authenticate in one way or another and to agree to terms and conditions. Sometimes this prevents researchers from using data freely, even if the data are in principle accessible through the API. Nevertheless, as long as you stick to these terms and conditions, getting data from an API implies that you are using the data with permission of the provider, which is not always the case with scraped data. This, however, does not mean that there are never ethical concerns with the use of API data! After all, the individuals who’s data you collect (e.g., social media users) may not agree with your use of the data. This is not different from scraped data. As opposed to scraped data, API-provided data are much more structured, precisely because they are meant to be used. More on that later. A web scraper is typically custom-build by a researcher to collect data from a specific website. In contrast, the technical procedures required to collect API data are much more determined by the provider of the data, allowing for less control by the researcher. 3.2 Loading the tools As before, we’re using a few specific packages for this task. Start a new R-script and copy-paste the below lines to load these packages. In this case, we haven’t included the install.packages() command; since you may already have installed some of these packages before, it’s not efficient to re-install them every time. Thus, if you get a warning like: There is no package called ... you need to install that package first using install.packages() like before (we don’t include that code here). Then, we load the packages: rm(list=ls()) # Start with a clean workspace library(RedditExtractoR) library(tidyverse) library(igraph) 3.3 Case study: Reddit Many websites have APIs, and some of them have been extensively used for research, in particular the Twitter API. However, since spring 2023, Twitter (X) no longer provides free access to their API. One of the platforms that still provides access is Reddit, although Reddit also implemented some controversial changes recently . If you’re not familiar with Reddit, please visit the website and browse around a bit (try to find your favorite topics) to make yourself familiar with how it works. In particular, pay attention to: What is a “subreddit”? What is the main purpose (or purposes) of the platform? What are the main properties of “posts”? What are the different ways in which users can interact with the platform (i.e., what are the actions available to users)? 3.4 Accessing data via the API To get data from the API, we can use specific URLs that provide us with the data we want. Instead of a readable webpages, these URLs provide data based on what we specify. For example, to download a list of threads, we could specify the following: https://www.reddit.com/r/{subreddit}/{listing}.json?limit={count}&amp;t={timeframe} Where: {subreddit} The name of the subreddit we want to access; {listing} Determines the order of the list: “controversial”, “best”, “hot”, “new”, “random”, “rising”, or “top”; {limit} The number of desired results; {timeframe} The time frame to which {listing} applies: “hour”, “day”, “week”, “month”, “year”, “all” (i.e., the top posts of the past month). In other words, the URL above says “please give me {limit} {listing} threads from the past {timeframe} from subreddit {subreddit}. Question: consider https://www.reddit.com/r/climate/new.json?limit=1&amp;t=all. What are we requesting here (i.e., what are {subreddit}, {listing}, {limit} and {timeframe}? Question: Now go to https://www.reddit.com/r/climate. Which information here corresponds with what we requested in the previous question? Now click on https://www.reddit.com/r/climate/new.json?limit=1&amp;t=all. What you see here is indeed not a nicely formatted website, but a whole lot of data. The data are structured using the JSON format, which is a common format for exchanging data online. This is a key difference between using an API and typical web scraping: in the latter case, the data are somwhere on a website that is designed to be human-readable, and we have to somehow filter out the relevant information; via the API data are already provided in a nicely structured way, and are intended to be used. Question: Identify the the following information in the JSON file you see in your browser: the title of the post, the name of its author, the current number of comments, and the date/time of posting. We could easily download the JSON data into R using a simple command like this (copy and paste into your R script and run it; ignore the warning): x &lt;- readLines(&quot;https://www.reddit.com/r/climate/new.json?limit=1&amp;t=all&quot;) Subsequently we can run x to view the data (try it), but the result is still quite messy. We could parse the data using R’s built-in JSON tools, but fortunately there is also an R-package specifically for Reddit that makes getting data from the Reddit API into R much more user-friendly. It’s called RedditExtractoR and we’ve already loaded it above. 3.5 Getting the data with RedditExtractoR 3.5.1 Getting threads As a first step, we download all the threads in the Subreddit. All? Not all. It seems actually unclear how many one can download. Choosing “new” and “all” seems to give a relatively large (and sensible) result. threads &lt;- find_thread_urls(subreddit=&quot;climate&quot;, sort_by=&quot;new&quot;, period = &quot;all&quot;) Take a look at the resulting data frame (click on “threads” in the environment tab in the top right corner. Question: How many threads have we downloaded? Which variables are available about each thread? Which thread is the thread that received most comments in these data? Question: Make a histogram of the number of comments. (Hint: look up the code for the histogram that we made in the previous tutorial.) 3.5.2 Getting contents of threads In the next step, we download the contents of these threads. Let’s take only a randomly chosen 50 for simplicity. Note that it is normal that the below code takes a bit of time to run. thread_contents &lt;- threads$url # start with the urls from the threads data frame thread_contents &lt;- sample(thread_contents, 50) # randomly sample 50 thread_contents &lt;- get_thread_content(thread_contents) The resulting object contains two data frames: “threads” and “comments”. The first contains data on the thread as a whole (such as the url, who started it and when, the number of comments, the content of the original post, etc. ). The second contains data of all the comments. Some important variables in “comments” are: url the url of the thread that the comment belongs to. This matches the urls in the “threads” data frame in “thread_contents”. author The author of the comment comment_id The position of the comment in the “tree” of the thread. “1” is the first comment to the original post, “2” is the second, etc. “1_1” is then the first comment to the first comment to the original post, etc. We can take the data frame with comments from the threads_contents object and turn it into its own data frame as follows: comments &lt;- thread_contents$comments Question: How many comments are there in total? Question: Which comment is the most “upvoted” comment? Question: The paper by Treen et al. (2022) used text analysis techniques such as topic modeling in their analysis of polarization on Reddit. Of the data that we have now collected, what do you think they used? 3.5.3 Creating a network The paper by Treen et al. (2022) aims to assess polarization by, among other things, studying the “reply network” in Subreddits. Question: how do they construct this network, that is, what are the links? And how do they assess the level of polarization? We can partly reproduce their analysis (for “our” Subreddit) using the code below. While this is relatively complicated, see of you can get the gist of what happens. Then, copy-paste and run the code. authors &lt;- thread_contents$threads %&gt;% # Get the &quot;threads&quot; part of the threat_contents object select(author, url) # keep only the author and url for each thread responders &lt;- thread_contents$comments %&gt;% # Get the &quot;comments&quot; part of the threat_contents object select(author, url) %&gt;% # keep only the author and url for each thread rename(&quot;responder&quot; = author) # rename &quot;author&quot; to &quot;responder&quot; # now match these two together, using the url as the matching variable reply_net &lt;- merge(authors, responders, by = &quot;url&quot;) %&gt;% select(author, responder) %&gt;% # keep only the author and responder vars graph_from_data_frame() # turn this into a &quot;network object&quot;: something the igraph package for network analysis can work with # plot the network plot(reply_net, vertex.label=NA, vertex.color = &quot;blue&quot;, vertex.size = 5, edge.arrow.size = 0.2, edge.color = &quot;black&quot;, graph.frame = TRUE, main = &quot;The reply network of 50 random threads on r/climate&quot; ) Note that Treen et al.’s network analysis is somewhat more elaborate; for instance, they use a technique called community detection to highlight different subgroups in the network, which we don’t do here for simplicity. Nevertheless, we can still try to assess the polarization of the network loosely by looking at the structure. Question: what would you conclude about polarization in this Subreddit? Question: Now pick another Subreddit on a topic that you find interesting, and try to make a network graph for this Subreddit as well. (Hint: you can reuse most of the code we’ve used above.) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
