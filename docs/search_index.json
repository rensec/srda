[["index.html", "Social Research in the Digital Age (Utrecht University) About Usage", " Social Research in the Digital Age (Utrecht University) Rense Corten About This page contains tutorials for the Utrecht University course “Social Research in the Digital Age”. Usage To use these tutorials, we suggest that you: Open a new R script; Copy-paste the code from the tutorials into your R script as you read along; Run the code from your script while reading along, to verify that your results are the same; Afterwards, save your R script under an informative name so that you can refer to it and reuse it later. A big part of effective data analysis is realizing that you’ve solved particular problems before and being able to find and recycle your earlier code! "],["a-very-short-introduction-to-r.html", "1 A Very Short Introduction to R 1.1 Introduction 1.2 Using RStudio 1.3 Running code from the R script 1.4 Using objects: Assigning values to names 1.5 Comments 1.6 Installing Packages 1.7 The working directory 1.8 Interacting with the Environment 1.9 Back to writing code 1.10 Data structures 1.11 Getting data into R 1.12 Saving data 1.13 Functions 1.14 Using functions 1.15 Getting help: viewing and interpreting function documentation", " 1 A Very Short Introduction to R 1.1 Introduction Welcome to the first week of Part I - Introduction to R! The aim of this practical is to introduce you to the R programming language as well as RStudio and some of its functionalities. You will also practice using some basic functions and operations. The contents of this practical are based on materials developed by Kyle Lang (https://github.com/kylelang/Introduction-to-R) as well as Kasper Welbers, Wouter van Atteveldt, Philipp Masur, and Paulina Pankowska (https://github.com/ccs-amsterdam/r-course-material). 1.1.1 What is R and why should you learn it? R is an open-source statistical software language, that is currently among the most popular languages for data science. In comparison to other popular software packages in social scientific research, such as SPSS and Stata, R has several notable advantages: R is a programming language, which makes it much more versatile. While R focuses on statistical analysis at heart, it facilitates a wide-range of features, and virtually any tool for data science can be implemented. The range of things you can do with R is constantly being updated. R is open-source, meaning that anyone can contribute to its development. In particular, people can develop new packages, that can easily and safely be installed from within R with a single command. Since many scholars and industry professionals use R, it is likely that any cutting-edge and bleeding-edge techniques that you are interested in are already available. You can think of it as an app-store for all your data-science needs! R is free. While for students this is not yet a big deal due to free or cheap student and university licences, this can be a big plus in the commercial sector. Especially for small businesses and free-lancers. 1.2 Using RStudio Once you have installed R and RStudio, you can start by launching RStudio. If everything was installed correctly, RStudio will automatically launch R as well. The first time you open RStudio, you will likely see three separate windows. The first thing you want to do is open an R Script to work in. To do so, go to the toolbar and select File -&gt; New File -&gt; R Script. You will now see four windows split evenly over the four corners of your screen: In the top-left you have the text editor for the file that you are working in. This will most of the time be an R script or RMarkdown file. In the top-right you can see the data and values that you are currently working with (environment) or view your history of input. In the bottom-left you have the console, which is where you can enter and run code, and view the output. If you run code from your R script, it will also be executed in this console. In the bottom-right you can browse through files on your computer, view help for functions, or view visualizations. While you can directly enter code into your console (bottom-left), you should, generally, always work with R scripts (top-left). This allows you to keep track of what you are doing and save every step. There are a few exceptions, which we will cover later. Note: You can also view your R script in a separate window by clicking on the icon with the small upward-pointing arrow in the top-left corner of the script editor. This is similar to the setup in, say, SPSS or Stata, and is especially useful if you have multiple monitors or a large screen. 1.3 Running code from the R script Copy and paste the following example code into your R Script. For now, don’t bother understanding the syntax itself. Just focus on running it. 3 + 3 2 * 5 (6 / 2) * 3 &quot;some text&quot; &quot;some more text&quot; sum(1,2,3,4,5) ## using a function You can run parts of the code in an R script by pressing Ctrl + Enter (on mac this is command + Enter). This can be done in two ways: If you select a piece of text (so that it is highlighted) you can press Ctrl + Enter to run the selection. For example, select the first three lines (the three mathematical operations) and press Ctrl + Enter. If you haven’t made a selection, but your text cursor is in the editor, you can press Ctrl + Enter to run the line where the cursor is at. This will also move the cursor to the next line, so you can walk through the code from top to bottom, running each line. Try starting on the first line, and pressing Ctrl + Enter six times, to run each line separately. 1.4 Using objects: Assigning values to names To do anything useful, we need to create objects that hold data. When running the example code, you saw that R automatically evaluates expressions. The calculation 3+3 evaluates to 6, and 2*5 evaluates to 10. You also saw that the function sum(1,2,3,4,5) evaluates to 15 (the sum of the numbers). For now, one more thing that you need to know about the R syntax is how values can be assigned to objects via the ‘assignment’ operator. In plain terms, assignment is how you make R remember things by assigning them a name. This works the same way for all sorts of values, from single numbers to entire datasets. You can choose whether you prefer the equal sign (=) or the arrow (&lt;-) for assignment. x = 2 x2 &lt;- 33.33 y &lt;- 4 &quot;Bob&quot; -&gt; z Here we have, among other things, remembered the number 2 as x and the text “some text” as y. If you are working in RStudio (which you should), you can now also see these names and values in the topright window, under the “Environment” tab. Evaluating an object name without assignment prints the value of that object (i.e., use the names to retrieve the values) y x z We can also use these values in new commands. x * 5 Note The assigned values can also be named objects w &lt;- y w Object names must begin with a letter my1X &lt;- pi my1X # 1X &lt;- pi # this will not work :( 1.4.1 PRACTICE PROBLEM 1 Create an object named test and assign the sum of 10 and 15 to it. # SOLUTION 1.5 Comments Comments are a useful way to annotate or document your code, so you and others can more easily understand it and know what is going on. The comment character in R is ‘#’; each commented line must be preceded by a ‘#’ symbol as there are no block comments in R. Comments are not evaluated when you run your code 1.6 Installing Packages Packages are collections of R functions (which we’ll talk about more later. For now it is enough to know that they are a set of statements organized together to perform a specific tasks; they are similar to commands in Stata or SPSS), data, and compiled code in a well-defined format, created to add specific functionality. There are 10,000+ user contributed packages and growing. There are a set of standard (or base) packages which are considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on datasets. Throughout our course you will need to install various packages, for example, for web scraping or network analysis. The standard way to install packages is using the following command: install.packages(&quot;psych&quot;) This command will install the package ‘psych’ from the Comprehensive R Archive Network (CRAN). CRAN is a network of servers around the world that store identical, up-to-date, versions of code and documentation for R. There are also ways to install packages from other places, which we don’t cover here for simplicity. 1.6.1 PRACTICE PROBLEM 2 Use install.packages() to install the following packages in the default location (i.e., don’t specify anything for the ‘lib’ argument): - ggplot2 - dplyr - haven # SOLUTION Much like any other software, we only need to install a package once on our computer (unless we update R), but we need to load the package each time we open R and want to use it. library(psych) While we recommended that you generally run commands from scripts rather than from the console, “install.packages()” may be an exception: as you typically need to run this only once per package, it is often more practical to run it directly from the console. 1.7 The working directory Every R session is associated with a ‘working directory’. The working directory is the directory wherein R will root its navigation when reading or writing data objects to or from disk. Find the current working directory getwd() Change the current working directory setwd(&quot;/Users/corte101/Teaching&quot;) # obviously this will not work for you, unless you are me! getwd() Note: Although opinions on this differ, this may be another exception to the rule that you should run commands from scripts rather than from the console. Setting the working directory is somwthing you may want to do outside your script, as it is a setting that is specific to your computer and your file structure, and you may not want your script to depend on that to work correctly. 1.7.1 PRACTICE PROBLEM 3 Use the setwd() to change your working directory to the directory in which this script is saved. # SOLUTION 1.8 Interacting with the Environment The ‘environment’ is a loosely organized set of all the objects that R currently has stored in working memory. We can check the contents of the current environment using a command: ls() …but you can also see the content of your environment in the top-right window of RStudio, under the “Environment” tab. And remove an object from the environment rm(x) ls() Or completely clear the enviroment rm(list = ls(all = TRUE)) ls() 1.8.1 PRACTICE PROBLEM 4 Create two objects and assign any value to them. Then use rm() to remove one of the objects. # SOLUTION 1.9 Back to writing code 1.9.1 Mathematical Operators Arithmetic x&lt;-2 y&lt;-4 y + x y - x y * x y / x Powers y^2 y^3 Roots sqrt(y) 1.9.1.1 PRACTICE PROBLEM 5 Create an object called ‘age’ that takes the value of your age in whole years. Use the ‘age’ object you created in (a) to create a second object called ‘weeks’ that takes the value of your age in whole weeks (assume 52 weeks in each year and disregard partial years). # SOLUTION 1.9.2 Logical Comparisons y &lt;- 5 x &lt;- 7 w &lt;- 5 Check equality y == x y == w Check relative size y &gt; x # greater than y &gt;= x # greater than or equal to y &lt; x # less than y &lt;= x # less than or equal to y &gt; w y &gt;= w y &lt; w y &lt;= w We can negate any logical condition by prepending the ‘!’ character y &gt; x !y &gt; x y == w y != w We can create more complex logical conditions with the AND and OR operators: ‘&amp;’ and ‘|’ y == w &amp; y &lt; x y == w &amp; y &gt; x y == w | y &gt; x 1.9.2.1 PRACTICE PROBLEM 6 Use a single line of code to generate a logical value (i.e., TRUE/FALSE) indicating if the value of the weeks object you created above is larger than the age object you created. # SOLUTION 1.10 Data structures In SPSS or Stata, data is organized in a rectangular data frame, with cells arranged in rows and columns. Typically, the rows then represent cases (e.g., respondents, participants, countries) and columns represent variables (e.g., age, gender, education level, GDP). For most analyses, this is also the recommended data format in R, using the data.frame structure. However, an important difference is that in R it is possible, and often useful, to combine different formats. Also, to understand how a data.frame in R works, it is useful to understand that a data.frame is a collection of vectors, and thus it is useful to first understand how vectors work. Here we will first briefly discuss vectors, and then quickly move on to data.frames. In addition, there are other common data structures, such as the matrix and list, which we will not discuss here. Different packages can also provide new classes for organizing and manipulating data. 1.10.1 Vectors The concept of a vector might be confusing from a social science background, because we rarely use the term in the context of statistics (well, not consciously at least). We won’t address why R calls them vectors and how this relates to vector algebra, but only how you most commonly use them. A vector in R is a sequence of one or more values of the same data type. From a social science background, it is very similar to what we often call a variable. You can declare a vector in R with c(...), where between the parentheses you enter the elements, separated with commas. The number of elements is called the length of the vector. A vector can have any of the data types discussed above (numeric, character, factor, logical, Date). v1 &lt;- c(1, 2, 10, 15) ## a numeric vector of length 4 v2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;b&quot;) ## a character vector of length 3 v3 &lt;- 1:10 ## a numeric vector of length 10 with the values 1 to 10 If you combine data types in the same vector, R will generally use the broadest data type for the entire vector. For example, if we combine both types in a vector, R will convert the numerical values to character values. c(1, 2, &quot;c&quot;) ## becomes a character vector of length 3 1.10.1.1 Selecting elements There are two common ways to select a specific element or a range of elements from a vector. One is to give the indices (positions) of the elements in square brackets after the vector name. Note that the indices themselves are given as a numeric vector. x &lt;- c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;) x[5] ## select the fifth element x[c(1,3)] ## select the first and third elements x[2:5] ## select elements two to five If you select with indices, the specific order of the indices is used, and you can also repeat indices. This can for instance be used to sort data. x[5:1] ## select elements in positions 5 to 1 x[c(5,5,5)] ## select the element in position 5 multiple times You can also use negative indices to select everything except the specified elements. x[-5] ## select every element except the fifth x[-c(1,3)] ## select every element other than the first and third The second way to select values is to use a logical vector, which we don’t cover here. 1.10.2 Data frames A data frame is essentially a collection of vectors with the same length, tied together as columns. This is equivalent to a data matrix that you would use in a program such as SPSS. To create the data frame, we use data.frame(). We enter the vectors in the format: column_name = vector. Here we create a data.frame* for data from a fictional experiment. d &lt;- data.frame(id = 1:10, condition = c(&#39;E&#39;, &#39;E&#39;, &#39;C&#39;, &#39;C&#39;, &#39;C&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;C&#39;, &#39;C&#39;), gender = c(&#39;M&#39;, &#39;M&#39;, &#39;F&#39;, &#39;M&#39;, &#39;F&#39;, &#39;F&#39;, &#39;F&#39;, &#39;M&#39;, &#39;M&#39;, &#39;F&#39;), age = c( 17, 19, 22, 18, 16, 21, 18, 17, 26, 18), score_t1 = c(8.0, 6.0, 7.5, 6.8, 8.0, 6.4, 6.0, 3.2, 7.3, 6.8), score_t2 = c(8.3, 6.4, 7.7, 6.3, 7.5, 6.4, 6.2, 3.6, 7.0, 6.5)) d Now, the data structure clearly implies that there is a relation between the elements in the column vectors. In other words, that each row represents a case. In our example, these cases are participants, and the columns represent: the participant id. the experimental condition (E = experimental condition, C = control group) demographic variables: gender and age. test scores before and after the experimental condition: score_t1 and score_t2 1.10.3 Selecting rows, columns and elements in data frames Since data.frames have both rows and columns, we need to use both to select data. Similar to selection in vectors, we use the square brackets. The difference is that for data.frames the square brackets have two parts, separated by a comma. Assuming our data.frame is called d, we can select with: syntax meaning d[i,j] select rows (i) and columns (j) d[i, ] select only rows (i) and use all columns d[ ,j] select only columns (j) and use all rows Selection for rows (i) and columns (j) works identical to selection in vectors. You can use either a numeric vector with indices, or a logical vector. Accordingly, you can also use comparisons. In addition, there are two special ways to select columns. One is that j can be a character vector with column names. The other uses the dollar sign ($). syntax meaning d[ ,c(“c1”, “c2”)] select the columns with the names “c1” and “c2” d$id select the column named id 1.10.3.1 Selecting columns in data frames Let’s put this to practice, starting with columns: ## selecting a single column returns a vector d[,1] ## select the first column by index d[,&quot;id&quot;] ## select the id column by name d$id ## select the id column using the dollar sign ## selecting multiple columns returns a data.frame d[,1:2] ## select the first two columns by indices d[,c(&quot;id&quot;,&quot;age&quot;)] ## select the &quot;id&quot; and &quot;age&quot; columns by name d[,-1] ## select every column except for the first 1.10.3.2 Selecting rows in data frames Selecting rows is practically identical to selecting elements from vectors, and it conveniently returns a data.frame with all columns and their matched positions intact. d[1:5,] ## select first 5 rows A very useful additional trick is that you can use all the columns to make comparisons. For example, we can use the gender column to look up all elements for which the value is “M” (male), and use this to select rows. d[d$gender == &quot;M&quot;, ] You can combine this with the logical operators to make a selection using multiple columns. d[d$gender == &quot;F&quot; &amp; d$age == 21, ] ## 21 year old female participant(s) d[d$score_t1 &lt; d$score_t2,] ## participants that scored higher after the condition 1.10.3.3 Selecting rows and columns in data frames We can combine row and column selection. This works just like you’d expect it to, so there’s little to add here. Do note, however, that you can combine the different selection methods. d[d$gender == &quot;F&quot;, &quot;score_t1&quot;] ## get the score_t1 column for female participants d[d$gender == &quot;F&quot;,]$score_t1 ## identical, but first subset data.frame, then select column d$score_t1[d$gender == &quot;F&quot;] ## identical, but first select column vector, then subset vector 1.10.4 PRACTICE PROBLEM 7 Subsetting, adding and modifying data With the selection techniques you already learned how to create a subset of the data. Try to subset the data so that only participants in the condition “E” are included. Assign this subset to a new name. Create a second subset in which only the variables id, gender, and age are included. Assign this subset to a different name. # SOLUTION 1.11 Getting data into R There are a number of ways to read data into R. One option is to use the readr package that comes with the tidyverse distribution, read_csv() reads comma delimited files. Download the file “flightdata.csv” from the course page and store it in your project folder (same folder that you set as your working directory at the beg. of the practical). This file contains a sample from the “flights” dataset from the nycflights13 package. This contains airline data for all flight departing from NYC in 2013. Read the flightdata.csv file into R with the readr package` using the code below # install.packages(&quot;readr&quot;) library(readr) flight_data &lt;- read_csv(&quot;flightdata.csv&quot;) # Imports the data flight_data # View the data To get other types of data into R the tidyverse packages listed below are recommended. haven reads SPSS, Stata, and SAS files readxl reads excel files (.xls and .xlsx) 1.11.1 Summarising the data Again, there are different functions to summarise data, but summary() that is available in base R works well too. Applying summary() to the data summary(flight_data) # `summary()` returns various summary statistics for every numeric variable including minimum and maximum, quartiles, mean and median. Notice that for character type variables, this returns the length of the variable. 1.12 Saving data Of course, you can also save a dataset in our computer in a variety of formats (e.g., .RData, .csv…). When saving, it is always important to understand where you are saving the file. Each R session is connected to a particular folder on your computer. you can check where you are by using getwd() which you were introduced to earlier. This resulting path is where the data will be stored. # Where are we currently on our computer? getwd() # Save and load an RData file save(d, file = &quot;test_data.RData&quot;) ## file = file and/or connection to write to load(file = &quot;test_data.RData&quot;) # Save and load a csv file write_csv(d, file = &quot;test_data.csv&quot;) d2 &lt;- read_csv(file = &quot;test_data.csv&quot;, ) d2 1.13 Functions Where data types and structures concern how data is represented in R, functions are the tools that you use to read, create, manage, manipulate, analyze and visualize data. A function is a set of statements organized to perform a specific task. It is an object that accepts a certain number of arguments and then returns the result of the task performed on these arguments. R has a large number of built-in functions and you can also create your own functions. For now, we will focus on the former. Simple examples of built-in functions are seq(), mean(), min(), max(), and sum(). While there are many correct and formal ways to define what functions are, for the sake of simplicity we will focus on an informal description of how you can think of functions in R: A function is used in the following way: output &lt;- function_name(argument1, argument2, ...) function_name is a name to indicate which function you want to use. It is followed by parentheses. arguments are the input of the function, and are inserted within the parentheses. Arguments can be any R object, such as numbers, strings, vectors and data.frames. Multiple arguments can be given, separated by commas. output is anything that is returned by the function, such as vectors, data.frames or the results of a statistical analysis. Some functions do not have output, but produce a visualization or write data to disk. The purpose of a function is to make it easy to perform a (large) set of (complex) operations. This is crucial, because It makes code easier to understand. You don’t need to see the operations, just the name of the function that performs them. You don’t need to understand the operations, just how to use the function. For example, say that you need to calculate the square root of a number. This is a very common thing to do in statistical analysis, but it actually requires a quite complicated set of operations to perform. This is when you want to use a function, in this case the sqrt (square root) function. sqrt(5) In this example, the function name is sqrt. The input is the single argument 5. If you run this code, it produces the output 2.236068. Currently, R will simply print this output in your Console, but as you learned before, we can assign this output to a name. square_root &lt;- sqrt(5) This simple process of input -&gt; function -&gt; output is essentially how you work with R most of the times. You have data in some form. You provide this data as input to a function, and R generates output. You can assign the output to a name to use it in the next steps, or the output is a table with results or a visualization that you want to interpret. 1.14 Using functions Above you saw the simple function sqrt(), that given a single number as input returned a single number as output. Functions can also have multiple arguments as input. Consider this function here: mean(x = c(1, 2, NA, 1, 2, 5), na.rm = TRUE) This function, with the name mean, is given several arguments here: x and na.rm. Given this input, many operations are performed behind the scenes to create the arithmetic mean of the vector. By now we hope you have realized just how broad the use of functions is. The R syntax for performing basic mathematical operations such as sqrt() is essentially the same as the syntax for creating a mean, performing advances statistical analysis or creating powerful visualizations. Accordingly, if you understand this syntax, you can do almost anything in R. 1.14.1 PRACTICE PROBLEM 8 Perform the following operations: 1. Create a sequence of numbers from 12 to 24. HINT: look up ?s eq 2. Sum the numbers from 20 to 60. 3. Find the mean of the numbers from 25 to 80. # SOLUTION The many R packages that you can install are mostly just collections of functions. We realize that it is a lot and might be a bit overwhelming. So we will now show you how to use the R help option which allows you to view and interpret any function documentation page and learn how to use it. 1.15 Getting help: viewing and interpreting function documentation You can access the documentation of a function by typing a question mark in front of the function name, and running the line of code. Let’s do this to view the documentation of the sqrt() function ?sqrt Alternatively, you can also use the ‘help’ function help(sqrt) help(&quot;sqrt&quot;) If you run this in RStudio, the help page will pop-up in the bottom-right corner, under the Help tab page. Sometimes, if the name of a documentation page is used in multiple packages, you will first receive a list of these packages from which you will have to select the page. For the sqrt() function, the help page has the title “Miscellaneous Mathematical Functions”. Just below the title, you see the Description, in which the author of a function briefly describes what the function is for. Here we see that there are two functions that are grouped under “Miscellaneous Mathematical Functions”, the abs() function for computing the absolute value of a number x, and the sqrt() function for the square root. Under description, the Usage is shown. This is simply the name of the function or functions, and the possible arguments that you can use. Here the Usage is extremely simple: both functions only take one argument named x. In a minute, we’ll discuss functions with multiple arguments. Below usage, the Arguments section explains how to use each argument. Here, the only argument is x, and it is explained that x is “a numeric or complex vector or array”. For now, let’s focus only on the case of a numeric vector. It appears that in addition to giving a single value like above (recall that in R this is actually a vector of length 1) we can give a vector with multiple numbers. sqrt(c(1,2,3,4,5)) There are more parts to the documentation that we’ll ignore for now. Notable parts to look into for yourself are Details, that provides more information, and the Examples section at the very bottom, which is a great starting point to see a function in action. Note Non-letter characters need to be quoted # ?/ will not work # help(/) will not work ?&quot;/&quot; # will work help(&quot;/&quot;) # will work Note II If a package is not loaded, you need to specify the namespace install.packages(&quot;mice&quot;, repos = &quot;http://cran.us.r-project.org&quot;) # ?quickpred will not work ?mice::quickpred help(quickpred, package = &quot;mice&quot;) Note III You can also open an interactive web-based help page help.start() 1.15.1 PRACTICE PROBLEM 9 Access the help file for the vector() function. How many arguments does the vector() function take? # SOLUTION "],["introduction-to-web-scraping-in-r.html", "2 Introduction to web scraping in R 2.1 Some preliminaries: about websites, scraping, and crawling 2.2 Getting our tools ready 2.3 Getting to know the target website 2.4 Making a plan 2.5 Locating the correct information 2.6 Building the scraper 2.7 Answering the research question", " 2 Introduction to web scraping in R This is a tutorial to illustrate the use or R for scraping in a social science context. The application is the Dutch website www.petities.nl, which is a platform where anyone can start a petition for any cause and collect signatures. Such websites fit into a larger trend in which citizens increasingly use the power of the internet to challenge the political status quo. The petitions listed here address a large variety of issues, some more serious than others. Interestingly, some petitions become very successful, while other peter out quickly. What drives such processes? To start addressing this question, we collect some data from this website using a scraper that we build in R. As a motivating research question, let’s state the following simple descriptive question: what does the variation in success between petitions look like? For a first hypothesis on what this might look like, have a look at Fig. 3.4 in the chapter by Margetts et al., as discussed in the seminar. 2.1 Some preliminaries: about websites, scraping, and crawling To get started, we need to understand a bit about the technical nature of web scraping. What is web scraping? For our context, which is social science-oriented research, we typically refer to web scraping as the automated collection of information from websites. In principle, there is nothing fancy about collecting or downloading information from websites. In fact, when you view a website, your browser does exactly this: it downloads some file from a server (such as an html-file) and renders it in a way that looks pretty. If you go to www.petities.nl, you can view this file by right-clicking on the page and selecting “view page source” (in various browsers this may be called slightly differently), which will, in this case, show the the HTML-code which produces the page. The information we want to collect for our research is somehow embedded in this code, and to view it we are already downloading it, so downloading the information per se is not so much the challenge. The real challenges in a web scraping project are a little bit more specific, namely: We want to download a large amount of information in a systematic and automated way; We want to process the information in a way such that we can easily analyze the data later. Step 1 above typically involves that we want to automatically visit a number of web pages, in a systematic way, even if we don’t know all the URL’s of these pages beforehand. For example, on a social media website, we may want to get a list of a given user’s followers, and once we have these followers, their followers, etc. This process of discovering websites by following links is called crawling. Web scraping, in the strict sense of the word, refers to the downloading (and processing) of the information found on those websites. A typical data collection task, then, does both: crawling the web to find relevant websites in a specified way, and in the process storing information from these websites. Generally, when we speak about “web scraping” or “a web scraper”, we actually mean a process or a piece of software that does both crawl and scrape. So let’s build a web scraper for petities.nl. 2.2 Getting our tools ready First, we need to collect some tools, starting with some R packages. Start a new R script, copy and paste the following code, and run it: install.packages( c( &quot;rvest&quot;, # the main package for scraping &quot;stringr&quot;, # some useful functions for working with strings &quot;tidyverse&quot;), # for general data handling repos = &quot;http://cran.us.r-project.org&quot; ) We then activate these packages for this session with library commands: library(rvest) #scraping library(stringr) # string functions library(tidyverse) # for general data handling Second, we need to add some special tool to our browser to get a better understanding of -and grip on- the website that we are scraping. I use Firefox, for which the add-on “ScrapeMate” is available. Chrome has different extensions for the same purpose, and so may other extendable browsers. Note that results may differ between browsers and extensions from website to website, so if you can’t figure out a website (you’ll see what I mean by that later) using one particular browser-extension combination, it’s always worth trying other combinations. Go go ahead and install the relevant extension for your browser. 2.3 Getting to know the target website Before we start coding, it’s always a good idea to get a little bit acquainted with the website we’re scraping. Go to Petities.nl and try to anwer the following questions: Which information is shown about each petition? How are petitions sorted? What different options do we have to show and sort petitions? Which one do you think is most useful for our purpose? What do the numbers in the bottom left and -right of each “petition box” mean? What is your impression about the sort of petitions that are posted here? Does anything stand out? Also, once more look at the page source code (see above). Which part of the content of the page can you already identify in the source code (and which not)? You’ll notice that there is a lot of code that does not seem to refer to any content; things like class=\"search-container whitespace\". This is called CSS (for Cascading Style Sheets) and it determines what a website looks like, by applying certain formatting rules to things that should look familiar (not unlike, for example, the style templates of Microsoft Word or Powerpoint). We’ll take advantage of this later to locate information on the page. 2.4 Making a plan Also, before starting to build our scraper (or before any data collection project, really) it is helpful to already have an idea of what we want our final data set to look like. For now, let’s start simple, and aim for a data set that is basically a list of petitions, and which contains for every petition: The title of the petition The url of the petition page The number of signatures As a data frame, the data should eventually look something like this: What the target data set should look like Title link_url Sig_Count “my petition” “https://petities.nl/petitions/my_petition” 9 … … … … … … … … … Check and see whether you can visually identify this information on the website. 2.5 Locating the correct information As a starting piont, let’s take the section of the website that lists all petitions: https://petities.nl/petitions/all?locale=en. When we look at the source code of the page, we can actually already identify all the information that we need in the code. This, however, is rather messy, and not something we can analyze directly. We somehow need to get the information in the shape of our data table above, and for this we first need to automatically extract the titles, URLs, and counts from the messy source code. This is where our browser extension comes in handy. When we look at the website (not the code), we can actually easily identify the relevant information because it is formatted in a consistent way. To achieve this, the website uses CSS tags in the code, and we can take advantage of that to find the relevant information. We could already do that by looking hard at the code, but our browser extension make it easier. Let’s start with the titles. In Firefox: Go to https://petities.nl/petitions/all?locale=en Click the icon for the “Scrapemate” extension in the toolbar (the little wand) In the resulting sidebar on the right, click the top orange button (“start picker”) Click the title of a petition. A few things will happen: All the titles of the petitions shown on the page will be highlighted. This is an indication that you’ve identified the right “field”; we want all those titles! In the bottom right, you will see a list of all the titles. Again, this is what we want! In the bar below the orange button, you’ll see “.petition-overview-info-title”. This is the relevant CSS tag: basically it tells the browser “show this piece of text as a petition title” (and the actual style of a petition title is stored somewhere in a CSS style file, but we don’t care about that). In building our scraper, we can now make use of that: we can basically tell it to “collect all the pieces of text that are formatted like petition titles”, and we now also know that these pieces of text are marked in the source code as “.petition-overview-info-title” (you can actually see this tag in the source code). So let’s get coding! 2.6 Building the scraper 2.6.1 First steps We now turn to the rvest package. To begin, we simply download the entire page: # Simple version without polite and without pipes webpage &lt;- read_html(&quot;https://petities.nl/petitions/all?locale=en&quot;) webpage This basically just behaves like a browser: it downloads the source code of the page. It still looks like unintelligible code soup. However, we now know what to look for in this soup. Using the html_nodes() function from rvest, we can identify all the titles: title &lt;- html_nodes(webpage, &quot;.petition-overview-info-title&quot;) title This already looks more structured: it is a list of all the parts in the code that where tagged as .petition-overview-info-title. In the next step, we parse (clean up) this list further to keep only the clean text: title &lt;- html_text(title) title This basically constitutes our variable “title” for our intended data frame, filled with the values of the petitions on this page. Question: how many titles do we have now? And is this the number you would expect? We can now do the same for our next variable, the url. Using our scrapemate tool again (we can either reset our earlier picker by clicking the circle button next to it, or use one of the other pickers in the sidebar), we can determine that the CSS tag in this case is .petition-overview-image-container. The code to get all the URLs then looks like this: link_url &lt;- webpage %&gt;% html_elements(&quot;.petition-overview-image-container&quot;)%&gt;% html_attr(&quot;href&quot;) Note that now we use the “pipe operator” %&gt;% to simplify the code somewhat (but we could also have done it without as above). Exercise: now write the code to get the number of signatures per petition. 2.6.2 Automating the process: getting multiple pages At this point, we can scrape the required information from the one page, namely, https://petities.nl/petitions/all. However, for our research project, we’re probably interested in more than just these 12 petitions; we want to get a sizable sample of petitions and perhaps even all petitions listed on the website. At the bottom of the page, we see that the list of petitions continues on page 2, 3, etc. Question: how many pages does the list of petitions contain in total? Now of course we could just manually go to the next page, check the url for that page, and repeat our earlier scraping steps to get the petitions for that page. Question: what is the URL of page 2? And page 3? However, this would be very tedious and take a long time. Rather, we’d like to automate this process so that our scraper automatically visits all the pages, and downloads the data. With that, we’re getting to the “crawling” part of web scraping, and it will require a little programming. While this may sound intimidating, it simply means that we are going to “recycle” our earlier instructions to the computer in a smart way. We’ve so far written our code for a specific URL; let’s now write in a way that can be applied to any URL. To do so, we include our earlier code in a function called get_petitions_list(): get_petitions_list &lt;- function(page_url){ webpage &lt;- read_html(page_url) title &lt;- webpage %&gt;% html_nodes(&quot;.petition-overview-info-title&quot;) %&gt;% html_text() link_url &lt;- webpage %&gt;% html_elements(&quot;.petition-overview-image-container&quot;)%&gt;% html_attr(&quot;href&quot;) sig_count &lt;- webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() petitions_list &lt;- data.frame(title, link_url, sig_count) return(petitions_list) } If we run this code, nothing really happens yet: all it does is define the function. That is, we can now refer to this set of scraping instructions using the function get_petitions_list(), filling in the URL of the page that we want to scrape as “page_url”. All the code inside the function will then be applied to this page. Specifically, it does the following: Download the source code of the page Extract the titles of the petitions Extract the link urls for each petition Extract the signature counts for each petition Combine the results in a single data frame The last line in the function starting with return defines the result of the function, in this case, the data frame. Let’s test this function on page 2: p2_petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=2&quot;) Question: did it work correctly? Now that we have a function to get all the data that we want from a given page in one go, all we need to to is apply this to all the pages we want to scrape and combine the results into a single data frame. To do so, we’ll use a loop: petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=1&quot;) # We start with the first page for(i in 2:5){ # Loop throup all values from 2 to 5. The current value is &quot;i&quot; target_page &lt;- paste(&quot;https://petities.nl/petitions/all?locale=en&amp;page=&quot;,i,sep = &quot;&quot;) # Create a string in with we add the current value i to the &quot;stub&quot; of the page url p &lt;-get_petitions_list(target_page) # scrape page i petitions &lt;- rbind(petitions, p) # add the petitions of page i to what we already had } See if you understand the above code with the help of the comments in the code. If you don’t know the additional functions that we use in the loop (for example, paste() or rbind() ), look them up to see what they do. Then, run the code. Question: What do you expect as the result, and is it correct? Question: what would we need to change in the above code to collect data on all petitions on the website? NOTE: at this point, do not actually run the code to collect data for all petitions. While this is tempting, it would 1) take a long time and 2) put an unnecessarily large burden on the Petities.nl servers. In principle, we now have a completely functional scraper! It is capable of automatically visiting a number of pages that we define, and collect the information from those pages that we wanted. Let’s just implement a few small improvements. First, you might have notices that the number of signatures is included in the data frame as a string variable, while it is actually a number. To avoid that we have to fix this afterwords, we can already fix it in our function (see “# NEW”): get_petitions_list &lt;- function(page_url){ webpage &lt;- read_html(page_url) title &lt;- webpage %&gt;% html_nodes(&quot;.petition-overview-info-title&quot;) %&gt;% html_text() link_url &lt;- webpage %&gt;% html_elements(&quot;.petition-overview-image-container&quot;)%&gt;% html_attr(&quot;href&quot;) sig_count &lt;- webpage %&gt;% html_elements(&quot;.petitions-counter&quot;) %&gt;% html_text() %&gt;% str_replace_all(&quot;\\\\.&quot;,&quot;&quot;) %&gt;% # NEW: remove Dutch 1000 separator as.numeric() # NEW: change the type from string to numeric petitions_list &lt;- data.frame(title, link_url, sig_count) return(petitions_list) } Second, you may have noticed that scraping five pages (probably) already took a noticeable amount of time. If we’d want to scrape many more pages, we may want to be able to keep track of the progress. For that purpose, we let R print some text to the console to report what going on, in our loop: petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=1&quot;) # We start with the first page for(i in 2:5){ # Loop throup all values from 2 to 5. The current value is &quot;i&quot; print(paste(&quot;scraping page&quot;,i,sep=)) #NEW: print what&#39;s happening to the console target_page &lt;- paste(&quot;https://petities.nl/petitions/all?locale=en&amp;page=&quot;,i,sep = &quot;&quot;) # Create a string in with we add the current value i to the &quot;stub&quot; of the page url p &lt;-get_petitions_list(target_page) # scrape page i petitions &lt;- rbind(petitions, p) # add the petitions of page i to what we already had } You may find that you every now and then get a warning “NAs introduced by coercion” (and if not now, you will certainly later). “NA” is R’s term for missing values. If we look at the data (click “petitions” in the environment tab in the top right), we indeed see that some petitions get the value “NA” (that is, missing) for sig_count. Question: What is the issue with these specific petitions (hint: look them up on the website)? And to what extent is this really a problem? 2.7 Answering the research question 2.7.1 Collecting the data Now that we have our scraper ready, we can start to use it to answer our descriptive research question (see above).First we need to collect a larger amount of data. In a real research project, you would probably want to collect the data of all the petitions on the website. However, since this is an educational project, we don’t want to put too much unnecessary strain on the server, and we have many students accessing the server at the same time, let’s limit our data collection to 25 pages. petitions &lt;- get_petitions_list(&quot;https://petities.nl/petitions/all?locale=en&amp;page=1&quot;) # We start with the first page for(i in 2:25){ # Loop throup all values from 2 to 5. The current value is &quot;i&quot; print(paste(&quot;scraping page&quot;,i,sep=)) #NEW: print what&#39;s happening to the console target_page &lt;- paste(&quot;https://petities.nl/petitions/all?locale=en&amp;page=&quot;,i,sep = &quot;&quot;) # Create a string in with we add the current value i to the &quot;stub&quot; of the page url p &lt;-get_petitions_list(target_page) # scrape page i petitions &lt;- rbind(petitions, p) # add the petitions of page i to what we already had } Question: Of how many petitions have you now collected data? 2.7.2 Analyzing the data Next, let’s analyze these data a bit. First, let’s get rid of these annoying “NA” values and replace them by 0. The “coalesce()” function helps with that: petitions$sig_count &lt;- coalesce(petitions$sig_count, 0) # replace missings by 0 For a first look at the data, we can draw a simple histogram: hist(petitions$sig_count) Question: What is your first conclusion about the distribution of success? In their analysis of the data, Margetts et al. visualize the data somewhat differently, in a way that helps to assess the skewness of the distribution a bit better. In particular, they plot the number of signatures against the rank of each petition in terms of signatures, and furthermore, they use logarithmic axes. To recreate their plot, we can do the following: # First we create a rank variable (more signatures = higher rank) petitions &lt;- mutate(petitions, rank = dense_rank(desc(sig_count))) # To avoid that petitions with zero signatures are left out of the plot (because the logarithm of zero is not defined) we add 1 to all values: petitions$sig_count &lt;- petitions$sig_count + 1 # Finally, we plot the data: plot(petitions$rank, petitions$sig_count, log = &quot;xy&quot;) Question:: Compare your figure to Figure 3.4 in the Chapter by Margetts et al. Does the distribution of success in the Netherlands look more like the one in the UK or the one in the US? "],["collecting-data-through-apis-the-case-of-reddit.html", "3 Collecting data through APIs: the case of Reddit 3.1 Introduction 3.2 Loading the tools 3.3 Case study: Reddit 3.4 Accessing data via the API 3.5 Getting the data with RedditExtractoR", " 3 Collecting data through APIs: the case of Reddit 3.1 Introduction In this tutorial, we will look at collecting data about human behavior using API access. As an example, we will collect some data from Reddit, the popular online discussion platform. API stands for “application programming interface”, and in general, it is a way in which software applications communicate with each other (instead of with a human user). In the context of websites, web APIs provide means for software applications to access data on web servers. Consider, for example, a smartphone app that allows you to read and post messages on your profile on a social media website such as Facebook. To be able to do so, such an app must be able to communicate with the Facebook server, access information on the server, and send information to the server. For this purpose, Facebook provides an API so that third-party apps can interact with their data. Similarly, a news website that displays the latest “X” (formerly Twitter) trends obtains that information via the X API. In a way, an API is an official “back door” to an application or website designed for other applications or websites; you may compare it with a restaurant that has a front door for guests (in the case of a website: for users) and back door specifically for delivery and employees. In many cases, APIs may also be used for research as they allow researchers to access data stored on web server of interest, such as the web servers of social media services. Web scraping may also be used to access similar data, but there are a number of important differences: As opposed to web scraping, API usage is strictly regulated by the application or website that offers it. That is, the provider of the API determines who can access the API, for what purposes, and under what conditions. Often (but not always), an API requires API users to authenticate in one way or another and to agree to terms and conditions. Sometimes this prevents researchers from using data freely, even if the data are in principle accessible through the API. Nevertheless, as long as you stick to these terms and conditions, getting data from an API implies that you are using the data with permission of the provider, which is not always the case with scraped data. This, however, does not mean that there are never ethical concerns with the use of API data! After all, the individuals who’s data you collect (e.g., social media users) may not agree with your use of the data. This is not different from scraped data. As opposed to scraped data, API-provided data are much more structured, precisely because they are meant to be used. More on that later. A web scraper is typically custom-build by a researcher to collect data from a specific website. In contrast, the technical procedures required to collect API data are much more determined by the provider of the data, allowing for less control by the researcher. 3.2 Loading the tools As before, we’re using a few specific packages for this task. Start a new R-script and copy-paste the below lines to load these packages. In this case, we haven’t included the install.packages() command; since you may already have installed some of these packages before, it’s not efficient to re-install them every time. Thus, if you get a warning like: There is no package called ... you need to install that package first using install.packages() like before (we don’t include that code here). Then, we load the packages: rm(list=ls()) # Start with a clean workspace library(RedditExtractoR) library(tidyverse) library(igraph) 3.3 Case study: Reddit Many websites have APIs, and some of them have been extensively used for research, in particular the Twitter API. However, since spring 2023, Twitter (X) no longer provides free access to their API. One of the platforms that still provides access is Reddit, although Reddit also implemented some controversial changes recently . If you’re not familiar with Reddit, please visit the website and browse around a bit (try to find your favorite topics) to make yourself familiar with how it works. In particular, pay attention to: What is a “subreddit”? What is the main purpose (or purposes) of the platform? What are the main properties of “posts”? What are the different ways in which users can interact with the platform (i.e., what are the actions available to users)? 3.4 Accessing data via the API To get data from the API, we can use specific URLs that provide us with the data we want. Instead of a readable webpages, these URLs provide data based on what we specify. For example, to download a list of threads, we could specify the following: https://www.reddit.com/r/{subreddit}/{listing}.json?limit={count}&amp;t={timeframe} Where: {subreddit} The name of the subreddit we want to access; {listing} Determines the order of the list: “controversial”, “best”, “hot”, “new”, “random”, “rising”, or “top”; {limit} The number of desired results; {timeframe} The time frame to which {listing} applies: “hour”, “day”, “week”, “month”, “year”, “all” (i.e., the top posts of the past month). In other words, the URL above says “please give me {limit} {listing} threads from the past {timeframe} from subreddit {subreddit}. Question: consider https://www.reddit.com/r/climate/new.json?limit=1&amp;t=all. What are we requesting here (i.e., what are {subreddit}, {listing}, {limit} and {timeframe}? Question: Now go to https://www.reddit.com/r/climate. Which information here corresponds with what we requested in the previous question? Now click on https://www.reddit.com/r/climate/new.json?limit=1&amp;t=all. What you see here is indeed not a nicely formatted website, but a whole lot of data. The data are structured using the JSON format, which is a common format for exchanging data online. This is a key difference between using an API and typical web scraping: in the latter case, the data are somwhere on a website that is designed to be human-readable, and we have to somehow filter out the relevant information; via the API data are already provided in a nicely structured way, and are intended to be used. Question: Identify the the following information in the JSON file you see in your browser: the title of the post, the name of its author, the current number of comments, and the date/time of posting. We could easily download the JSON data into R using a simple command like this (copy and paste into your R script and run it; ignore the warning): x &lt;- readLines(&quot;https://www.reddit.com/r/climate/new.json?limit=1&amp;t=all&quot;) Subsequently we can run x to view the data (try it), but the result is still quite messy. We could parse the data using R’s built-in JSON tools, but fortunately there is also an R-package specifically for Reddit that makes getting data from the Reddit API into R much more user-friendly. It’s called RedditExtractoR and we’ve already loaded it above. 3.5 Getting the data with RedditExtractoR 3.5.1 Getting threads As a first step, we download all the threads in the Subreddit. All? Not all. It seems actually unclear how many one can download. Choosing “new” and “all” seems to give a relatively large (and sensible) result. threads &lt;- find_thread_urls(subreddit=&quot;climate&quot;, sort_by=&quot;new&quot;, period = &quot;all&quot;) Take a look at the resulting data frame (click on “threads” in the environment tab in the top right corner. Question: How many threads have we downloaded? Which variables are available about each thread? Which thread is the thread that received most comments in these data? Question: Make a histogram of the number of comments. (Hint: look up the code for the histogram that we made in the previous tutorial.) 3.5.2 Getting contents of threads In the next step, we download the contents of these threads. Let’s take only a randomly chosen 50 for simplicity. Note that it is normal that the below code takes a bit of time to run. thread_contents &lt;- threads$url # start with the urls from the threads data frame thread_contents &lt;- sample(thread_contents, 50) # randomly sample 50 thread_contents &lt;- get_thread_content(thread_contents) The resulting object contains two data frames: “threads” and “comments”. The first contains data on the thread as a whole (such as the url, who started it and when, the number of comments, the content of the original post, etc. ). The second contains data of all the comments. Some important variables in “comments” are: url the url of the thread that the comment belongs to. This matches the urls in the “threads” data frame in “thread_contents”. author The author of the comment comment_id The position of the comment in the “tree” of the thread. “1” is the first comment to the original post, “2” is the second, etc. “1_1” is then the first comment to the first comment to the original post, etc. We can take the data frame with comments from the threads_contents object and turn it into its own data frame as follows: comments &lt;- thread_contents$comments Question: How many comments are there in total? Question: Which comment is the most “upvoted” comment? Question: The paper by Treen et al. (2022) used text analysis techniques such as topic modeling in their analysis of polarization on Reddit. Of the data that we have now collected, what do you think they used? 3.5.3 Creating a network The paper by Treen et al. (2022) aims to assess polarization by, among other things, studying the “reply network” in Subreddits. Question: how do they construct this network, that is, what are the links? And how do they assess the level of polarization? We can partly reproduce their analysis (for “our” Subreddit) using the code below. While this is relatively complicated, see of you can get the gist of what happens. Then, copy-paste and run the code. authors &lt;- thread_contents$threads %&gt;% # Get the &quot;threads&quot; part of the threat_contents object select(author, url) # keep only the author and url for each thread responders &lt;- thread_contents$comments %&gt;% # Get the &quot;comments&quot; part of the threat_contents object select(author, url) %&gt;% # keep only the author and url for each thread rename(&quot;responder&quot; = author) # rename &quot;author&quot; to &quot;responder&quot; # now match these two together, using the url as the matching variable reply_net &lt;- merge(authors, responders, by = &quot;url&quot;) %&gt;% select(author, responder) %&gt;% # keep only the author and responder vars graph_from_data_frame() # turn this into a &quot;network object&quot;: something the igraph package for network analysis can work with # plot the network plot(reply_net, vertex.label=NA, vertex.color = &quot;blue&quot;, vertex.size = 5, edge.arrow.size = 0.2, edge.color = &quot;black&quot;, graph.frame = TRUE, main = &quot;The reply network of 50 random threads on r/climate&quot; ) Note that Treen et al.’s network analysis is somewhat more elaborate; for instance, they use a technique called community detection to highlight different subgroups in the network, which we don’t do here for simplicity. Nevertheless, we can still try to assess the polarization of the network loosely by looking at the structure. Question: what would you conclude about polarization in this Subreddit? Question: Now pick another Subreddit on a topic that you find interesting, and try to make a network graph for this Subreddit as well. (Hint: you can reuse most of the code we’ve used above.) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
